---
title: "Class 8: PCA Mini Project"
author: "Josefina O'Toole (PID: A16978557)"
format: pdf
---

Today we will do a complete analysis of some breast cancer biopsy data but first let's revisit the main PCA function in R `prcomp()` and see what `scale=TRUE/FALSE` does.

# prcomp(x, scale=F, center=F) scale should be T, although the default is F.
```{r}
head(mtcars)
```

find the mean value per column of this dataset?

```{r}
apply(mtcars, 2, sd)
```

```{r}
apply(mtcars, 2, mean)
```

It is clear that "disp" and "hp" have the highest mean values and the highest standard deviation here. They will likely dominate any analysis I do on this dataset. Let's see.

```{r}
pc.noscale <- prcomp(mtcars, scale=FALSE)
pc.scale <- prcomp(mtcars, scale=TRUE)
```

```{r}
biplot(pc.noscale)
```

```{r}
pc.noscale$rotation[,1]
```

plot the loadings

```{r}
library(ggplot2)

r1 <- as.data.frame(pc.noscale$rotation)
r1$names <- rownames(pc.noscale$rotation)

ggplot(r1) +
  aes(PC1, names) +
  geom_col()
```

```{r}
r2 <- as.data.frame(pc.scale$rotation)
r2$names <- rownames(pc.scale$rotation)

ggplot(r2) +
  aes(PC1, names) +
  geom_col()
```

```{r}
biplot(pc.scale)
```

> **Take home**: Generally we always want to sent `scale=TRUE` when we do this type of analysis to avoid our analysis being dominated by individual variables with the largest variance just due to their unit of measurement.


# FNA breast cancer data

Load the data into R.

```{r}
wisc.df <- read.csv("WisconsinCancer.csv", row.names=1)

head(wisc.df)
```

> Q1. How many observations are in this dataset?

```{r}
nrow(wisc.df)
```

> Q2. How many of the observations have a malignant diagnosis?

The `table()` function is super useful here

```{r}
table(wisc.df$diagnosis)
```

> Q3. How many variables/features in the data are suffixed with _mean?

```{r}
ncol(wisc.df)
```

```{r}
colnames(wisc.df)
```

A useful function for this is the `grep()`

```{r}
length( grep("_mean", colnames(wisc.df)) )
```

Before we go any further we need to exclude the diagnoses column from any future analysis - this tells us whether a sample is cancer or non-cancer.

```{r}
diagnosis <- as.factor(wisc.df$diagnosis)
head(diagnosis)
```

Everything but the first column.

```{r}
wisc.data <- wisc.df[,-1]
```

Lets see if we can cluster the `wisc.data` to find some structure in the dataset.

```{r}
hc <- hclust( dist(wisc.data) )
plot(hc)
```

# Principal Component Analysis (PCA)

```{r}
wisc.pr <- prcomp(wisc.data, scale=TRUE)
summary(wisc.pr)
```

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

> A4. 44%

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

> A5. 3 principal components.

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

> A6. 7 principal components.


```{r}
biplot(wisc.pr)
```

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

> A7. It is difficult to understand as all the ID numbers block all the information.

This biplot sucks! We need to build our own PCA score plot of PC1 vs PC2.

```{r}
head(wisc.pr$x)
```

Plot of PC1 vs PC2 the first two columns.

```{r}
plot(wisc.pr$x[,1], wisc.pr$x[,2], col=diagnosis)
```

> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

> A8. These plots look very similar.

```{r}
plot(wisc.pr$x[,1], wisc.pr$x[,3], col=diagnosis)
```


Make a ggplot version of this score plot.

```{r}
pc <- as.data.frame(wisc.pr$x)

ggplot(pc) +
  aes(PC1, PC2, col=diagnosis) +
  geom_point()
```

```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

```{r}
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```

```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```

> Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
wisc.pr$rotation["concave.points_mean",1]
```

> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

> A10. PC5

```{r}
wisc.pr <- prcomp(wisc.data, scale=TRUE)
summary(wisc.pr)
```
```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)
```

```{r}
data.dist <- dist(data.scaled)
```

```{r}
wisc.hclust <- hclust(data.dist)
```

> Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

> A11. At a height of 19.

```{r}
plot(wisc.hclust)
abline(h=19, col="red", lty=2)
```

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k=4)
```

```{r}
table(wisc.hclust.clusters, diagnosis)
```

> Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10?

> A12. I think 6 clusters is a better cluster vs diagnoses match but it is always a trade off. More clusters does not necessarily make it better.

```{r}
wisc.hclust.clusters2 <- cutree(wisc.hclust, k=6)
```

```{r}
table(wisc.hclust.clusters2, diagnosis)
```

## Clustering in PC space

```{r}
hc <- hclust(dist(wisc.pr$x[,1:2]), method="ward.D2")

plot(hc)
abline(h=70, col="red")
```

Cluster membership vector

```{r}
grps <- cutree(hc, h=70)
table(grps)
```

```{r}
table(diagnosis)
```

Cross-table to see how my clustering groups correspond to the expert diagnosis vector of M and B values.

```{r}
table(grps, diagnosis)
```

Positive => cancer M
Negative => non-cancer B

True = cluster/grp 1
False = cluster/grp 2

True Positive 177
False Positive 18
True Negative 339
False Negative 35

We can use our PCA results (wisc.pr) to make predictions on new unseen data.

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

```{r}
plot(wisc.pr$x[,1:2], col=grps)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

> Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

> A13. The "ward.D2" gives my favorite results for the data.dist dataset because there are two clear groups shown (one big goal post) whereas the other methods don't show a clear distinction of groupings.

```{r}
hc <- hclust(dist(wisc.pr$x[,1:2]), method="ward.D2")

plot(hc)
abline(h=70, col="red")
```

```{r}
hc2 <- hclust(dist(wisc.pr$x[,1:2]), method="single")

plot(hc2)
abline(h=70, col="red")
```

```{r}
hc3 <- hclust(dist(wisc.pr$x[,1:2]), method="complete")

plot(hc3)
abline(h=70, col="red")
```

```{r}
hc3 <- hclust(dist(wisc.pr$x[,1:2]), method="average")

plot(hc3)
abline(h=70, col="red")
```

## K-means clustering

```{r}
wisc.km <- kmeans(scale(wisc.data), centers= 2, nstart= 20)
```

```{r}
table(wisc.km$cluster, diagnosis)
```

> Q14. How well does k-means separate the two diagnoses? How does it compare to your hclust results?

> A14. The k-means cluster groups are separated pretty well. It does a better job than the hclust results (B: 357, 0 & M: 210, 2).

```{r}
table(wisc.hclust.clusters, wisc.km$cluster)
```

```{r}
wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:7]), method="ward.D2")

plot(wisc.pr.hclust)
abline(h=70, col="red")
```

```{r}
grps <- cutree(wisc.pr.hclust, k=2)
table(grps)
```

```{r}
table(grps, diagnosis)
```

```{r}
plot(wisc.pr$x[,1:2], col=grps)
```

```{r}
plot(wisc.pr$x[,1:2], col=diagnosis)
```

```{r}
g <- as.factor(grps)
levels(g)
```

```{r}
g <- relevel(g,2)
levels(g)
```

```{r}
# Plot using our re-ordered factor 
plot(wisc.pr$x[,1:2], col=g)
```

```{r}
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=2)
```

```{r}
# Compare to actual diagnoses
table(wisc.pr.hclust.clusters, diagnosis)
```

> Q15. How well does the newly created model with four clusters separate out the two diagnoses?

> A15. The newly created model separates out the two diagnoses relatively well but not perfectly.

> Q16. How well do the k-means and hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.

```{r}
table(wisc.km$cluster, diagnosis)
table(wisc.hclust.clusters, diagnosis)
```

> A16. Again, the separation is pretty good but not perfect.

> Q17. Which of your analysis procedures resulted in a clustering model with the best specificity? How about sensitivity?


hclust
```{r}
# Sensitivity = TP/(TP+FN) 
188/(188+24)
# Specificity = TN/(TN+FN)
329/(329+28)
```

kmeans
```{r}
# Sensitivity = TP/(TP+FN) 
175/(175+37)
# Specificity = TN/(TN+FN)
343/(343+14)
```

> A17. The model with the best specificity is the hclust (89% > 83%). The model with the best sensitivity is kmeans (96% > 92%).

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

```{r}
plot(wisc.pr$x[,1:2], col=g)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

> Q18. Which of these new patients should we prioritize for follow up based on your results?

> A18. Patients in group 1.

